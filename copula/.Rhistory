xx = matrix(NA, nps, nps)
xx
xx[zz[,1],zz[,2]] = zz[,3]
xx
image(xx)
image(xx)
tid = fff[,3] == 0.9
tx = fff[tid,1] * 10 + 1
ty = fff[tid,2] * 10 + 1
tz = out[tid]
zz = cbind(tx,ty,tz)
xx = matrix(NA, nps, nps)
xx[zz[,1],zz[,2]] = zz[,3]
image(xx)
tid = fff[,3] == 1
tx = fff[tid,1] * 10 + 1
ty = fff[tid,2] * 10 + 1
tz = out[tid]
zz = cbind(tx,ty,tz)
xx = matrix(NA, nps, nps)
xx[zz[,1],zz[,2]] = zz[,3]
image(xx)
tid = fff[,3] == 0.9
xx
##安装加载packages##
install.packages("VineCopula")
install.packages("CDVineCopulaConditional")
library(VineCopula)
library(CDVineCopulaConditional)
##建模数据##
group[[1]]
ff<-matrix(0,35,3)
ff[,1]<- group[[1]][,1]
library(VineCopula)
library(CDVineCopulaConditional)
##建模数据##
group[[1]]
ff<-matrix(0,35,3)
load("/Users/wang/WANG/A_Plate/Lu_HeatDry/pixelRVine/test_copula.RData")
##建模数据##
group[[1]]
ff<-matrix(0,35,3)
ff[,1]<- group[[1]][,1]
ff[,2]<- group[[1]][,2]
ff[,3]<- group[[1]][,3]
##藤Copula建模##
cvine<-CDVineCondFit(ff,Nx=2,c(1,2,3,4,5,9),rotation=F,treecrit="AIC",type="CVine",selectioncrit="AIC")
dvine<-CDVineCondFit(ff,Nx=2,c(1,2,3,4,5,9),rotation=F,treecrit="AIC",type="DVine",selectioncrit="AIC")
summary(cvine)
summary(dvine)
##条件概率分布和联合概率##
#CVine#
d<-dim(cvine$Matrix)[1]
cond1<-ff[,cvine$Matrix[(d+1)-1,(d+1)-1]]
cond2<-ff[,cvine$Matrix[(d+1)-2,(d+1)-2]]
condition<-cbind(cond1,cond2)#构造2个条件分布矩阵#
f1<-CDVineCondSim(cvine,condition)
f1[,1]#条件概率分布#
#假设u1是0.6，u2是0.7，u3是0.8，求联合分布概率#
fff<-matrix(0,1,3)
fff[1,1]<-0.6
fff[1,2]<-0.7
fff[1,3]<-0.8
RVinePIT(fff,cvine)[3]#联合概率#
RVinePDF(fff,cvine)#联合概率密度#
gpp
group[[1]]
d
summary(cvine)
summary(dvine)
rm(list = ls())
load("~/WANG/A_Plate/Lu_HeatDry/codes/zzz_misc/x_80_y_622.RData") ## temperature
## vpd --- Pa to hPa
vpddd = vpdd / 100
## temperature --- K to °C
tempp = temp - 273.15
##### 3. calculate GPP derivatives
#apar = parr * fapar[xi,yi]
fw = (38-vpddd)/(38-6.5)
vd0 = which(vpddd <= 6.5 )
fw[vd0] = 1
vd1 = which( vpddd >= 38 )
fw[vd1] = 0.1
fw
ft
ft = exp(-((tempp-22)/28)^2)
td0 = which( tempp <= -8 )
ft[td0] = 0.01
td1 = which( tempp >= 40 )
ft[td1] = 0.01
dw = diff(gppp)/diff(fw)
dt = diff(gppp)/diff(ft)
re[[xi,yi]] = data.frame(gpp = gppp, fw = fw, ft = ft, dw = c(dw,0), dt = c(dt,0))
re= data.frame(gpp = gppp, fw = fw, ft = ft, dw = c(dw,0), dt = c(dt,0))
re
nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
install.packages('basicTrendline')
library(basicTrendline)
nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
gppp
ft
tt = nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
#error handling code
set.seed(27)
yeps <- gppp + rnorm(length(gppp), sd = 0.01) # added noise
tt = nls(yeps~SSexp3P(ft,a,b,c), data=data.frame(ft,yeps))
nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
trendline_summary(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
ft = exp(-(tempp-22)/(28)^2)
rm(list = ls())
load("~/WANG/A_Plate/Lu_HeatDry/codes/zzz_misc/x_80_y_622.RData") ## temperature
## vpd --- Pa to hPa
vpddd = vpdd / 100
## temperature --- K to °C
tempp = temp - 273.15
##### 3. calculate GPP derivatives
#apar = parr * fapar[xi,yi]
fw = (38-vpddd)/(38-6.5)
vd0 = which(vpddd <= 6.5 )
fw[vd0] = 1
vd1 = which( vpddd >= 38 )
fw[vd1] = 0.1
ft = exp(-(tempp-22)/(28)^2)
td0 = which( tempp <= -8 )
ft[td0] = 0.01
td1 = which( tempp >= 40 )
ft[td1] = 0.01
ft
plot(ft, gppp)
ft = exp(-((tempp-22)/22)^2)
plot(ft, gppp)
?trendline
??trendline
trendline(ft, gppp, model = "SSexp3P")
library(basicTrendline)
trendline(ft, gppp, model = "SSexp3P")
trendline(ft, gppp, model = "power3P")
tt = nls(yeps~SSexp3P(ft,a,b,c), data=data.frame(ft,yeps))
yeps <- gppp + rnorm(length(gppp), sd = 0.01) # added noise
tt = nls(yeps~SSexp3P(ft,a,b,c), data=data.frame(ft,yeps))
tt
tt = nls(yeps~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
tt
tt = nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
trendline(ft, gppp, model = "power3P")
trendline(ft, gppp, model = "power3P")
tt = nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
trendline_summary(ft, gppp, model = "power3P")
tt = nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
data.frame(ft,gppp)
trendline(ft, gppp, model = "power3P")
library(basicTrendline)
trendline(ft, gppp, model = "power3P")
tt = nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
tt = nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
trendline(ft, gppp, model = "power3P")
tt = nls(gppp~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
??nls
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp))
trendline_summary(ft, gppp, model = "power3P")
trendline_summary(ft, gppp, model = "power3P", summary = F)
?trendline_summary
library(basicTrendline)
info(basicTrendline)
require(basicTrendline)
install.packages(basicTrendline)
install.packages('basicTrendline')
install.packages("basicTrendline")
install.packages("basicTrendline")
trendline(ft, gppp, model = "power3P", summary = F)
library(basicTrendline)
trendline(ft, gppp, model = "power3P")
trendline(ft, gppp, model = "exp3P")
trendline(ft, gppp, model = "exp3P")
?nls.control
10e9
1e9
nls.control(minFactor = 1/1e6)
trendline(ft, gppp, model = "exp3P")
nls.control(minFactor = 1/1e12)
trendline(ft, gppp, model = "exp3P")
nls.control(minFactor = 1e-12)
trendline(ft, gppp, model = "exp3P")
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp))
nls.control(minFactor = 1e-12)
nls.control
nls.control()
nls.control(minFactor = 1e-12)
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp))
nls.control()
nls.control(warnOnly =  T)
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp))
?nls
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp), control= nls.control(warnOnly =  T))
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp), control= nls.control(warnOnly=T))
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp), control= nls.control(warnOnly=T,minFactor = 1e-12))
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp), control= nls.control(warnOnly=T,minFactor = 1))
rm(list = ls())
load("~/WANG/A_Plate/Lu_HeatDry/codes/zzz_misc/x_80_y_622.RData") ## temperature
## vpd --- Pa to hPa
vpddd = vpdd / 100
## temperature --- K to °C
tempp = temp - 273.15
##### 3. calculate GPP derivatives
#apar = parr * fapar[xi,yi]
fw = (38-vpddd)/(38-6.5)
vd0 = which(vpddd <= 6.5 )
fw[vd0] = 1
vd1 = which( vpddd >= 38 )
fw[vd1] = 0.1
ft = exp(-((tempp-22)/22)^2)
re= data.frame(gpp = gppp, fw = fw, ft = ft)
library(basicTrendline)
trendline(ft, gppp, model = "exp3P")
trendline(ft, gppp, model = "exp3P", control = nls.control(warnOnly=T,minFactor = 1e-12))
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp), control= nls.control(warnOnly=T,minFactor = 1e-12))
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp),
control= nls.control(warnOnly=T,minFactor = 1e-9))
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp),
control= nls.control(warnOnly=T,minFactor = 1/1024))
tt = nls("gppp~SSexp3P(ft,a,b,c)", data=data.frame(ft,gppp),
control= nls.control(warnOnly=T,minFactor = 1/1024))
tt = nls("gppp~SSexp3P(ft,a,b,c)",  control= nls.control(warnOnly=T,minFactor = 1/1024),
data=data.frame(ft,gppp))
tt = nls("gppp~SSexp3P(ft,a,b,c)",  control= nls.control(warnOnly=T,minFactor = 1/1024),
data=data.frame(ft,gppp), algorithm = "plinear")
tt = nls("gppp~SSexp3P(ft,a,b,c)",  control= nls.control(warnOnly=T,minFactor = 1/1024),
data=data.frame(ft,gppp), algorithm = "plinear", trace=TRUE)
tt = nls("gppp~SSexp3P(ft,a,b,c)",  control= list(warnOnly=T,minFactor = 1/1024),
data=data.frame(ft,gppp), algorithm = "plinear", trace=TRUE)
tt = nls("gppp~SSexp3P(ft,a,b,c)",  control= list(warnOnly=T),
data=data.frame(ft,gppp), algorithm = "plinear", trace=TRUE)
tt = nls("gppp~SSexp3P(ft,a,b,c)",  control= list(warnOnly=T),
data=data.frame(ft,gppp), algorithm = "plinear", trace=TRUE)
tt = nls("gppp~SSexp3P(ft,a,b,c)",  control= list(printEval = T,warnOnly=T),
data=data.frame(ft,gppp), algorithm = "plinear", trace=TRUE)
debugonce(nls("gppp~SSexp3P(ft,a,b,c)",  control= list(printEval = T,warnOnly=T),
data=data.frame(ft,gppp), algorithm = "plinear", trace=TRUE))
debugonce(nls("gppp~SSexp3P(ft,a,b,c)",  control= list(printEval = T,warnOnly=T),
data=data.frame(ft,gppp), algorithm = "plinear", trace=TRUE))
debug(nls("gppp~SSexp3P(ft,a,b,c)",  control= list(printEval = T,warnOnly=T),
data=data.frame(ft,gppp), algorithm = "plinear", trace=TRUE))
rm(list = ls())
load("~/WANG/A_Plate/Lu_HeatDry/codes/zzz_misc/x_80_y_622.RData") ## temperature
## vpd --- Pa to hPa
vpddd = vpdd / 100
## temperature --- K to °C
tempp = temp - 273.15
##### 3. calculate GPP derivatives
#apar = parr * fapar[xi,yi]
fw = (38-vpddd)/(38-6.5)
vd0 = which(vpddd <= 6.5 )
fw[vd0] = 1
vd1 = which( vpddd >= 38 )
fw[vd1] = 0.1
ft = exp(-((tempp-22)/22)^2)
library(basicTrendline)
trendline(ft, gppp, model = "exp3P", control = nls.control(warnOnly=T,minFactor = 1e-12))
debug(nls("gppp~SSexp3P(ft,a,b,c)", algorithm="plinear",
trace=TRUE, control=nls.control(printEval=TRUE, minFactor=2^-24, warnOnly=TRUE))
#error handling code
set.seed(27)
yeps <- gppp + rnorm(length(gppp), sd = 0.01) # added noise
tt = nls(yeps~SSexp3P(ft,a,b,c), data=data.frame(ft,gppp))
}else{
}
a = summary(tt)
para_a[xi,yi] = coef(tt)["a"]
para_b[xi,yi] = coef(tt)["a"]
para_c[xi,yi] = coef(tt)["a"]
sim = para_a[xi,yi]*exp(para_b[xi,yi]*ft)+para_c[xi,yi]
r2[xi,yi] = (cor(gppp,sim, use = "pairwise",method = 'spearman'))^2
k = a$df[1]-1 ##K is the number of independent regressors, i.e. the number of variables in your model, excluding the constant
r2_adj[xi,yi] = 1 - ((1-r2[xi,yi])*(length(sim)-1)/(length(sim)-k-1))
aic[xi,yi] = AIC(tt)
rmse[xi,yi] = rmse(gppp,sim)
deriv[[ti]][xi,yi] = para_a[xi,yi]*para_b[xi,yi]*exp(para_b[xi,yi]*ftx[ti])
summaryy[[xi,yi]] = a
debug(nls("gppp~SSexp3P(ft,a,b,c)", algorithm="plinear",
trace=TRUE, control=nls.control(printEval=TRUE, minFactor=2^-24, warnOnly=TRUE)))
?nls
getwd（）
getwd()
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
mat
# mat = cbind(c(1,6,11,16,21,26), mat)
# mat = rbind(mat, c(26,27,28,29,30,0))
nf <- layout(mat, widths = c(1,1,1,1,0.2), heights = c(1,1,1,1,1))
layout.show(nf)
plot(1:10)
# mat = cbind(c(1,6,11,16,21,26), mat)
# mat = rbind(mat, c(26,27,28,29,30,0))
nf <- layout(mat, widths = c(1,1,1,1,0.2), heights = c(1,1,1,1,1))
layout.show(nf)
par(mai = c(3.5 ,4.5, 1.5, 0.5), mgp = c(2,0.8,0))
par(mai = c(3.5 ,4.5, 1.5, 0.5), mgp = c(2,0.8,0), xpd = T)
plot(1:10)
plt_cpT_veg_month <- function(xxx, fname, hs, ds,params = list(zlm = c(0,1), col= tim.colors(100))){
nms_veg = c("forest","open forest","shrub land","paddy field","dry land","grassland")
png(filename = fname,width = 1080, height = 1080, units = "px",
bg = "transparent",  res = NA)
par(bg = "#ffffff")
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
# mat = cbind(c(1,6,11,16,21,26), mat)
# mat = rbind(mat, c(26,27,28,29,30,0))
nf <- layout(mat, widths = c(1,1,1,1,0.2), heights = c(1,1,1,1,1))
layout.show(nf)
# set.panel()
# ind <- split.screen(c(6,nmts))
breaks = linspace(0,1,length(params$col)+1) * max(params$zlm)
for(ii in 1:16){
par(mai = c(3.5 ,4.5, 1.5, 0.5), mgp = c(2,0.8,0), xpd = T)
hi = ceiling(ii /4)
di = mod0(ii, 4)
print(sprintf('%d,%d', hi, di))
if (hi == 1){
tmain = sprintf("p-pet percentile = %.2f",ds[di])
} else {
tmain = "";
}
if (di==1){
tylb = sprintf("tmax percentile = %.2f", hs[hi])
} else {
tylb = ""
}
Fdata <- xxx[[hi, di]]
# plot(1:10)
# tmap<- as.matrix(Fdata) #t(map);
# lon <- c(90.55001, 121.85)
# lat <- c(24.55, 35.75)
# Fmap <-raster(tmap, #[nrow(tmap):1,],
#               xmn=min(lon), xmx=max(lon),
#               ymn=min(lat), ymx=max(lat),
#               crs=CRS("+proj=longlat +datum=WGS84"))
# plot(Fmap, col = params$col, breaks = breaks, main = "",xlab ="", ylab = "",axes = F)
image(t(Fdata[dim(Fdata)[1]:1,]),zlim = params$zlm,col =params$col,
main=tmain, cex.main=3,xlab="tmax", ylab= tylb, axes=F,
cex.main = 1.5, cex.lab = 1.5, cex.axis = 1.2)
# legend.args=list( text=""),smallplot=c(0.85,0.9,0.1,0.9)
}
par(mai = c(3.5 ,0.5, 1.5, 2.5), pty = "m", err = -1, xpd = T)
ix <- 1:2
iy <- breaks
nBreaks <- length(breaks)
midpoints <- (breaks[1:(nBreaks - 1)] + breaks[2:nBreaks])/2
iz <- matrix(midpoints, nrow = 1, ncol = length(midpoints))
image(ix,iy, iz, xaxt = "n", yaxt = "n", xlab = "",
ylab = "",col =params$col,breaks = breaks)
axis.args <- c(list(side = 4, mgp = c(3, 1, 0),
las = 2,
at = seq(0,1,0.1)* max(params$zlm)))
do.call(axis,axis.args)
dev.off();
}
hs = c(0.95, 0.9, 0.8, 0.5)
ds = c(0.05, 0.1, 0.2, 0.5)
library(WangTools)
library(LuGPP)
clc()
file = './copula_temporal_plotdata_tmaxppet_detrend.RData'
load(file)
library(stringr)
str_replace(file,'_plotdata','')
savename = str_replace(savename, 'copula_', '')
savename
file = './copula_temporal_plotdata_tmaxppet_detrend.RData'
savename = str_replace(file,'_plotdata','')
savename = str_replace(savename, 'copula_', '')
savename
savename = str_replace(savename, '.RData', '')
savename
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
mat
mat = cbind(c(0,0,0,0), mat)
mat = cbind(c(0,0,0,0), mat)
mat = rbind(mat, c(0,0,0,0,0))
mat
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
mat = cbind(c(0,0,0,0), mat)
mat = rbind(mat, c(0,0,0,0,0))
mat
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
mat = cbind(c(0,0,0,0), mat)
mat = rbind(mat, c(0,0,0,0,0,0))
mat
source('./function_copula_MT.R')
i = 1
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
mat = cbind(c(0,0,0,0), mat)
mat = rbind(mat, c(0,0,0,0,0,0))
nf <- layout(mat, widths = c(0.1,1,1,1,1,0.2), heights = c(1,1,1,1,0.15))
layout.show(nf)
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
mat = cbind(c(0,0,0,0), mat)
mat = rbind(mat, c(0,0,0,0,0,0))
nf <- layout(mat, widths = c(0.1,1,1,1,1,0.2), heights = c(1,1,1,1,0.15))
layout.show(nf)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
mat = cbind(c(0,0,0,0), mat)
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
mat
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
nf = W_figure(mat, marg = c(0.15, 0.1, 0.1, 0), w = c(1,1,1,1,0.2))
library(devtools)
reload("WangTools")
devtools::reload("WangTools")
devtools::reload(WangTools)
devtools::reload("WangTools")
library(WangTools)
devtools::reload("WangTools")
reload(pkg= "WangTools")
library(devtools)
reload(pkg= "WangTools")
library(devtools)
reload(pkg= "WangTools")
reload(pkg= "WangTools")
reload(pkg= "LuGPP")
reload(pkgload::inst("LuGPP"))
reload(pkgload::inst("WangTools"))
nf = W_figure(mat, marg = c(0.15, 0.1, 0.1, 0), w = c(1,1,1,1,0.2))
mat <-t(matrix(1:16,4,4))
mat = cbind(mat, c(17,0,0,0))
nf = W_figure(mat, marg = c(0.15, 0.1, 0.1, 0), w = c(1,1,1,1,0.2))
nx = mat
nx
ny = NULL
marg
marg = c(0.15, 0.1, 0.1, 0)
w = c(1,1,1,1,0.2)
if (is.null(ny)){
mat = nx
} else {
mat = t(matrix(1:(nx*ny), ny, nx))
}
mat = as.matrix(mat)
if (is.null(w)){
w = c(matrix(1, 1, dim(mat)[2]))
}
if (is.null(h)){
h = c(matrix(1, 1, dim(mat)[1]))
}
h = NULL
if (is.null(h)){
h = c(matrix(1, 1, dim(mat)[1]))
}
if (!is.null(marg)){
if (marg[1] > 0){
mat = rbind(mat, matrix(0,1,dim(mat)[2]))
h = c(h, marg[1])
}
if (marg[2] > 0){
mat = cbind(matrix(0, dim(mat)[1],1), mat)
w = c(marg[2], w)
}
if (marg[3] > 0){
mat = rbind(matrix(0,1,dim(mat)[2]), mat)
h = c(marg[3], h)
}
if (marg[4] > 0){
mat = cbind(mat, matrix(0, dim(mat)[1],1))
w = c(w, marg[4])
}
}
nf <- layout(mat, widths = w, heights = h)
w
h
mat
layout(mat)
dev.off()
dev.off()
nf <- layout(mat, widths = w, heights = h)
layout.show(nf)
dev.off()
dev.off()
dev.off()
nf <- layout(mat, widths = w, heights = h)
layout.show(nf)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
source('./function_copula_MT.R')
plt_cpT_veg_month(cpls[[i]]$prob, sprintf("%s_ratio%.2f.png", savename, cpls[[i]]$ratio),hs, ds)
library(rcicr)
generateCI2IFC
generateStimuli2IFC
generateCI
